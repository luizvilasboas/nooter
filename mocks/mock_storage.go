// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "gitlab.com/olooeez/nooter/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockStorage) AddTodo(todo models.Todo) (models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", todo)
	ret0, _ := ret[0].(models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockStorageMockRecorder) AddTodo(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockStorage)(nil).AddTodo), todo)
}

// DeleteTodoByID mocks base method.
func (m *MockStorage) DeleteTodoByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodoByID indicates an expected call of DeleteTodoByID.
func (mr *MockStorageMockRecorder) DeleteTodoByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoByID", reflect.TypeOf((*MockStorage)(nil).DeleteTodoByID), id)
}

// GetTodoByID mocks base method.
func (m *MockStorage) GetTodoByID(id int) (models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", id)
	ret0, _ := ret[0].(models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockStorageMockRecorder) GetTodoByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockStorage)(nil).GetTodoByID), id)
}

// GetTodos mocks base method.
func (m *MockStorage) GetTodos() ([]models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos")
	ret0, _ := ret[0].([]models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockStorageMockRecorder) GetTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockStorage)(nil).GetTodos))
}

// InitDB mocks base method.
func (m *MockStorage) InitDB(filepath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitDB", filepath)
}

// InitDB indicates an expected call of InitDB.
func (mr *MockStorageMockRecorder) InitDB(filepath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDB", reflect.TypeOf((*MockStorage)(nil).InitDB), filepath)
}

// UpdateTodo mocks base method.
func (m *MockStorage) UpdateTodo(id int, updatedTodo models.Todo) (models.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, updatedTodo)
	ret0, _ := ret[0].(models.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockStorageMockRecorder) UpdateTodo(id, updatedTodo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockStorage)(nil).UpdateTodo), id, updatedTodo)
}
